% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scrape-detailpage.R
\name{parse_all_detailpages}
\alias{parse_all_detailpages}
\title{Parse data from multiple product detail pages}
\usage{
parse_all_detailpages(detailpagehtml_list, returntype = "data.frame")
}
\arguments{
\item{detailpagehtml_list}{A list of html structure
from multiple geizhals page listing details of a
specific item.}

\item{returntype}{Either \code{"list"} or
\code{"data.frame"} (default).}
}
\value{
A tibble (data.frame) with as many columns
  as there are distinct categories in all feature
  pages, and as many rows as there are products
  for \code{returntype = "data.frame"}. Otherwise,
  a list where each list entry containes the
  parsed data from a single detailpage (not
  necessarily with each list entry having the
  same categories).
}
\description{
Returns all categories and their values in a list of
detailed product description pages, as well as
a summary of all price values from the price list
in each of the  detailed product description pages.
In contrast to the \code{parse_single_detailpage}
function, the categories describing a product are
the columns, and each product is represented as a
row in the resulting tibble (data.frame).
The tibble has as many columns as there are categories,
if a product doesn't feature all categories in its
description, this column will be \code{NA}. Column
types are inferred from the data automatically.
If \code{returntype} is specified to be \code{"list"},
the data is returned as a list, without combining
the data into a data frame.
}
\examples{
\dontrun{
## get data from multiple geizhals category pages:
url_geizhals <- "https://geizhals.at/?cat=acam35"
listpagehtml_list <- fetch_all_listpages(url_geizhals, max_pages = 2)
dat_listpage <- parse_all_listpages(listpagehtml_list)
## pick only the three first detailpage urls:
wch_detailpage_urls <- dat_listpage[["detailpage_url"]][1:3]
detailpagehtml_list <- fetch_all_detailpage_html(wch_detailpage_urls)
## get data from all detailpages:
dat_detailpages <- parse_all_detailpages(detailpagehtml_list)
head(dat_detailpages)
## get the same data as a list:
dat_detailpages_list <- parse_all_detailpages(detailpagehtml_list,
                                              returntype = "list")
head(dat_detailpages_list)
}

}
